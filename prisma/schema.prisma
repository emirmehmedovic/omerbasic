datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model Product {
  id                 String      @id @default(cuid())
  name               String
  description        String?
  price              Float
  imageUrl           String?
  stock              Int         @default(0)
  catalogNumber      String      @unique
  oemNumber          String?
  isFeatured         Boolean     @default(false)
  isArchived         Boolean     @default(false)
  categoryId         String
  category           Category    @relation(fields: [categoryId], references: [id])
  orderItems         OrderItem[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  // TecDoc dodatna polja
  technicalSpecs     Json?       // Tehničke specifikacije (npr. viskozitet, standardi)
  dimensions         Json?       // Dimenzije proizvoda (npr. promjer, visina)
  standards          String[]    @default([]) // Standardi koje proizvod zadovoljava

  // Many-to-many relation with VehicleGeneration
  vehicleGenerations VehicleGeneration[]
}

model Category {
  id        String     @id @default(cuid())
  name      String
  products  Product[]

  // Self-referencing relation for subcategories
  parentId  String?
  parent    Category?  @relation("Subcategories", fields: [parentId], references: [id], onDelete: Cascade)
  children  Category[] @relation("Subcategories")
  
  // TecDoc dodatna polja
  level     Int        @default(1) // 1=glavna, 2=podkategorija, 3=specifična
  iconUrl   String?    // URL do ikone kategorije

  @@unique([name, parentId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ShippingMethod {
  PICKUP
  COURIER
}

enum PaymentMethod {
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

model Order {
  id                String      @id @default(cuid())
  subtotal          Float
  shippingCost      Float
  total             Float
  status            OrderStatus @default(PENDING)
  shippingMethod    ShippingMethod?
  paymentMethod     PaymentMethod?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  items             OrderItem[]
  comments          Comment[]
  customerName      String
  customerEmail     String
  shippingAddress   Json
  billingAddress    Json?
  userId            String?
  user              User?       @relation(fields: [userId], references: [id])
  // B2B polja
  isB2BOrder        Boolean     @default(false)
  discountPercentage Float?     // Postotak popusta za B2B narudžbu
}

model OrderItem {
  id           String  @id @default(cuid())
  quantity     Int
  price        Float       // Cijena s popustom (ako je B2B narudžba)
  originalPrice Float?     // Originalna cijena prije popusta (za B2B narudžbe)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orderId      String
  order        Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId    String
  product      Product @relation(fields: [productId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  text      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth.js Models

enum UserRole {
  USER
  ADMIN
  B2B
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  companyName   String?   // Naziv firme
  taxId         String?   // OIB ili porezni broj
  discountPercentage  Float?                 @default(0)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  orders        Order[]
  passwordResetTokens PasswordResetToken[]
  addresses     Address[]
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id                String   @id @default(cuid())
  street            String
  city              String
  postalCode        String
  country           String
  isDefaultShipping Boolean  @default(false)
  isDefaultBilling  Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum VehicleType {
  PASSENGER
  COMMERCIAL
}

model VehicleBrand {
  id      String         @id @default(cuid())
  name    String         @unique
  type    VehicleType
  models  VehicleModel[]
}

model VehicleModel {
  id          String              @id @default(cuid())
  name        String
  brandId     String
  brand       VehicleBrand        @relation(fields: [brandId], references: [id], onDelete: Cascade)
  generations VehicleGeneration[]

  @@unique([name, brandId])
}

model VehicleGeneration {
  id           String    @id @default(cuid())
  modelId      String
  model        VehicleModel @relation(fields: [modelId], references: [id], onDelete: Cascade)
  name         String // e.g., "B8", "Mk7", "Tiguan II"
  period       String? // e.g., "2014-2023"
  vinCode      String?
  bodyStyles   Json? // e.g., ["Sedan", "Variant"]
  engines      Json? // e.g., ["1.6 TDI", "2.0 TDI"]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // TecDoc dodatna polja za motor
  engineType     String?    // PETROL, DIESEL, HYBRID, ELECTRIC
  enginePowerKW  Float?     // Snaga motora u kW
  enginePowerHP  Float?     // Snaga motora u KS
  engineCapacity Int?       // Zapremina motora u ccm
  engineCode     String?    // Kod motora

  // Many-to-many relation with Product
  products     Product[]

  @@unique([modelId, name])
}

