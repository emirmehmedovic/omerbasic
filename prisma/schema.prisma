datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model Product {
  id                 String      @id @default(cuid())
  name               String
  description        String?
  price              Float
  imageUrl           String?
  stock              Int         @default(0)
  catalogNumber      String      @unique
  oemNumber          String?
  isFeatured         Boolean     @default(false)
  isArchived         Boolean     @default(false)
  categoryId         String
  category           Category    @relation(fields: [categoryId], references: [id])
  orderItems         OrderItem[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  // TecDoc dodatna polja
  technicalSpecs     Json?       // Tehničke specifikacije (npr. viskozitet, standardi)
  dimensions         Json?       // Dimenzije proizvoda (npr. promjer, visina)
  standards          String[]    @default([]) // Standardi koje proizvod zadovoljava

  // Veza s vozilima kroz ProductVehicleFitment model
  vehicleFitments ProductVehicleFitment[]
  
  // Nove relacije za TecDoc
  attributeValues     ProductAttributeValue[]
  originalReferences  ProductCrossReference[] @relation("OriginalProduct")
  replacementFor      ProductCrossReference[] @relation("ReplacementProduct")
  
  // Relacije za dobavljače i narudžbenice
  supplierProducts    SupplierProduct[]
  purchaseOrderItems  PurchaseOrderItem[]
  
  // Relacija za featured products
  featuredProduct     FeaturedProduct?
}

model Category {
  id        String     @id @default(cuid())
  name      String
  products  Product[]

  // Self-referencing relation for subcategories
  parentId  String?
  parent    Category?  @relation("Subcategories", fields: [parentId], references: [id], onDelete: Cascade)
  children  Category[] @relation("Subcategories")
  
  // TecDoc dodatna polja
  level     Int        @default(1) // 1=glavna, 2=podkategorija, 3=specifična
  iconUrl   String?    // URL do ikone kategorije
  
  // Nove relacije za TecDoc
  attributes CategoryAttribute[]
  attributeGroups AttributeGroup[]
  
  // Relacija za kategorijske popuste
  discounts CategoryDiscount[]
  
  // Relacija za dobavljače
  supplierCategories SupplierCategory[]

  @@unique([name, parentId])
}

// Model za grupe atributa kategorija
model AttributeGroup {
  id          String    @id @default(cuid())
  name        String    // Npr. "Tehničke specifikacije", "Dimenzije"
  label       String    // Lokalizirani naziv za prikaz
  sortOrder   Int       @default(0)
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  attributes  CategoryAttribute[]
  
  @@unique([name, categoryId])
}

// Model za definicije atributa kategorija
model CategoryAttribute {
  id              String    @id @default(cuid())
  name            String    // Naziv atributa (npr. "viscosity", "diameter")
  label           String    // Oznaka za prikaz (npr. "Viskozitet", "Promjer")
  type            String    // Tip podatka (string, number, boolean, enum, range, dimension)
  unit            String?   // Jedinica mjere (npr. "mm", "kg")
  options         Json?     // Opcije za enum tipove
  isRequired      Boolean   @default(false)
  isFilterable    Boolean   @default(false)
  isComparable    Boolean   @default(false)  // Može li se koristiti za usporedbu proizvoda
  sortOrder       Int       @default(0)      // Redoslijed prikaza
  categoryId      String
  category        Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  groupId         String?
  group           AttributeGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)
  values          ProductAttributeValue[]
  
  // Validacijska pravila i konverzije jedinica
  validationRules Json?     // Min/max vrijednosti, regex paterni, itd.
  supportedUnits  Json?     // Lista podržanih jedinica za konverziju
  
  @@unique([name, categoryId])
}

// Model za vrijednosti atributa proizvoda
model ProductAttributeValue {
  id          String    @id @default(cuid())
  value       String    // Vrijednost atributa (spremljena kao string)
  numericValue Float?   // Za numeričke vrijednosti (za lakše sortiranje/filtriranje)
  unit        String?   // Jedinica u kojoj je vrijednost pohranjena
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributeId String
  attribute   CategoryAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  
  @@unique([productId, attributeId])
}

// Model za predloške atributa
model AttributeTemplate {
  id          String    @id @default(cuid())
  name        String    // Naziv predloška
  description String?   // Opis predloška
  attributes  Json      // Definicije atributa u predlošku
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Novi model za cross-reference
model ProductCrossReference {
  id              String   @id @default(cuid())
  productId       String
  product         Product  @relation("OriginalProduct", fields: [productId], references: [id], onDelete: Cascade)
  referenceType   String   // OEM, Aftermarket, Replacement, etc.
  referenceNumber String   // Broj dijela za referencu
  manufacturer    String?  // Proizvođač reference
  notes           String?  // Dodatne napomene
  replacementId   String?  // ID zamjenskog proizvoda ako postoji u sustavu
  replacement     Product? @relation("ReplacementProduct", fields: [replacementId], references: [id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ShippingMethod {
  PICKUP
  COURIER
}

enum PaymentMethod {
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

model Order {
  id                String      @id @default(cuid())
  subtotal          Float
  shippingCost      Float
  total             Float
  status            OrderStatus @default(PENDING)
  shippingMethod    ShippingMethod?
  paymentMethod     PaymentMethod?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  items             OrderItem[]
  comments          Comment[]
  customerName      String
  customerEmail     String
  shippingAddress   Json
  billingAddress    Json?
  userId            String?
  user              User?       @relation(fields: [userId], references: [id])
  // B2B polja
  isB2BOrder        Boolean     @default(false)
  discountPercentage Float?     // Postotak popusta za B2B narudžbu
}

model OrderItem {
  id           String  @id @default(cuid())
  quantity     Int
  price        Float       // Cijena s popustom (ako je B2B narudžba)
  originalPrice Float?     // Originalna cijena prije popusta (za B2B narudžbe)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orderId      String
  order        Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId    String
  product      Product @relation(fields: [productId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  text      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth.js Models

enum UserRole {
  USER
  ADMIN
  B2B
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  companyName   String?   // Naziv firme
  taxId         String?   // OIB ili porezni broj
  discountPercentage  Float?                 @default(0)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  orders        Order[]
  passwordResetTokens PasswordResetToken[]
  addresses     Address[]
  categoryDiscounts CategoryDiscount[]
  
  // Relacije za narudžbenice
  createdPurchaseOrders PurchaseOrder[] @relation("CreatedPurchaseOrders")
  updatedPurchaseOrders PurchaseOrder[] @relation("UpdatedPurchaseOrders")
  purchaseOrderStatusChanges PurchaseOrderStatusHistory[]
  purchaseOrderComments PurchaseOrderComment[]
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id                String   @id @default(cuid())
  street            String
  city              String
  postalCode        String
  country           String
  isDefaultShipping Boolean  @default(false)
  isDefaultBilling  Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Model za kategorijske popuste za B2B korisnike
model CategoryDiscount {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId        String
  category          Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  discountPercentage Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, categoryId])
}

// Model dobavljača
model Supplier {
  id            String   @id @default(cuid())
  name          String
  companyName   String
  address       String
  city          String
  postalCode    String
  country       String
  email         String
  phone         String
  contactPerson String?
  taxId         String?
  notes         String?   @db.Text
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacije
  categories    SupplierCategory[]
  products      SupplierProduct[]
  orders        PurchaseOrder[]
}

// Veza dobavljača s kategorijama
model SupplierCategory {
  id          String   @id @default(cuid())
  supplierId  String
  categoryId  String
  priority    Int      @default(1) // Prioritet dobavljača za ovu kategoriju
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacije
  supplier    Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([supplierId, categoryId])
}

// Veza dobavljača s proizvodima
model SupplierProduct {
  id          String   @id @default(cuid())
  supplierId  String
  productId   String
  supplierSku String?  // Šifra proizvoda kod dobavljača
  priority    Int      @default(1) // Prioritet dobavljača za ovaj proizvod
  price       Float    // Nabavna cijena
  minOrderQty Int?     // Minimalna količina za narudžbu
  leadTime    Int?     // Vrijeme isporuke u danima
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacije
  supplier    Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems  PurchaseOrderItem[]
  
  @@unique([supplierId, productId])
}

// Enum za status narudžbenice
enum PurchaseOrderStatus {
  DRAFT
  SENT
  CONFIRMED
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}

// Model narudžbenice
model PurchaseOrder {
  id                  String               @id @default(cuid())
  orderNumber         String               @unique // Automatski generirani broj narudžbe
  supplierId          String
  status              PurchaseOrderStatus  @default(DRAFT)
  orderDate           DateTime             @default(now())
  expectedDeliveryDate DateTime?
  deliveryDate        DateTime?
  subtotal            Float
  taxAmount           Float
  totalAmount         Float
  notes               String?              @db.Text
  createdById         String
  updatedById         String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  // Relacije
  supplier            Supplier             @relation(fields: [supplierId], references: [id])
  items               PurchaseOrderItem[]
  statusHistory       PurchaseOrderStatusHistory[]
  comments            PurchaseOrderComment[]
  createdBy           User                 @relation("CreatedPurchaseOrders", fields: [createdById], references: [id])
  updatedBy           User?                @relation("UpdatedPurchaseOrders", fields: [updatedById], references: [id])
}

// Model stavki narudžbenice
model PurchaseOrderItem {
  id                String   @id @default(cuid())
  purchaseOrderId   String
  productId         String
  supplierProductId String?
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQty       Int      @default(0)
  notes             String?  @db.Text
  
  // Relacije
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product           Product  @relation(fields: [productId], references: [id])
  supplierProduct   SupplierProduct? @relation(fields: [supplierProductId], references: [id])
}

// Model povijesti statusa narudžbenice
model PurchaseOrderStatusHistory {
  id                String             @id @default(cuid())
  purchaseOrderId   String
  status            PurchaseOrderStatus
  changedById       String
  changedAt         DateTime           @default(now())
  notes             String?            @db.Text
  
  // Relacije
  purchaseOrder     PurchaseOrder     @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  changedBy         User              @relation(fields: [changedById], references: [id])
}

// Model komentara na narudžbenici
model PurchaseOrderComment {
  id                String   @id @default(cuid())
  purchaseOrderId   String
  comment           String   @db.Text
  createdById       String
  createdAt         DateTime @default(now())
  
  // Relacije
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  createdBy         User     @relation(fields: [createdById], references: [id])
}

enum VehicleType {
  PASSENGER
  COMMERCIAL
}

model VehicleBrand {
  id      String         @id @default(cuid())
  name    String         @unique
  type    VehicleType
  models  VehicleModel[]
}

model VehicleModel {
  id          String              @id @default(cuid())
  name        String
  brandId     String
  brand       VehicleBrand        @relation(fields: [brandId], references: [id], onDelete: Cascade)
  generations VehicleGeneration[]

  @@unique([name, brandId])
}

model VehicleGeneration {
  id           String    @id @default(cuid())
  modelId      String
  model        VehicleModel @relation(fields: [modelId], references: [id], onDelete: Cascade)
  name         String // e.g., "B8", "Mk7", "Tiguan II"
  period       String? // e.g., "2014-2023"
  vinCode      String?
  bodyStyles   Json? // e.g., ["Sedan", "Variant"]
  engines      Json? // e.g., ["1.6 TDI", "2.0 TDI"]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Poveznica na motore koji pripadaju ovoj generaciji
  vehicleEngines VehicleEngine[]

  // Dodatna TecDoc polja za detaljnije informacije o vozilu
  constructionType    String?    // Tip konstrukcije (npr. Sedan, Hatchback)
  wheelbase           Float?     // Međuosovinski razmak u mm
  brakeSystem         String?    // Tip kočionog sustava
  driveType           String?    // Tip pogona (FWD, RWD, AWD)
  fuelType            String?    // Tip goriva (dodatno uz engineType)
  transmission        String?    // Tip transmisije
  doors               Int?       // Broj vrata
  axles               Int?       // Broj osovina (važno za teretna vozila)
  weight              Float?     // Težina vozila u kg
  productionStart      String?    // Početak proizvodnje (godina)
  productionEnd        String?    // Kraj proizvodnje (godina)

  // Poveznica na proizvode kroz ProductVehicleFitment model
  productFitments ProductVehicleFitment[]

  @@unique([modelId, name])
}

model VehicleEngine {
  id              String    @id @default(cuid())
  generationId    String
  generation      VehicleGeneration @relation(fields: [generationId], references: [id], onDelete: Cascade)
  engineType      String    // PETROL, DIESEL, HYBRID, ELECTRIC
  
  // Poveznica na ProductVehicleFitment
  productFitments ProductVehicleFitment[]
  enginePowerKW   Float?    // Snaga motora u kW
  enginePowerHP   Float?    // Snaga motora u KS
  engineCapacity  Int?      // Zapremina motora u ccm
  engineCode      String?   // Kod motora
  description     String?   // Dodatni opis motora
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Model za detaljnu kompatibilnost proizvoda s vozilima
model ProductVehicleFitment {
  id              String    @id @default(cuid())
  productId       String
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  generationId    String
  generation      VehicleGeneration @relation(fields: [generationId], references: [id], onDelete: Cascade)
  engineId        String?
  engine          VehicleEngine? @relation(fields: [engineId], references: [id], onDelete: SetNull)
  
  // Dodatne informacije o kompatibilnosti
  fitmentNotes    String?   // Dodatne napomene o kompatibilnosti
  position        String?   // Pozicija na vozilu (npr. "Prednji", "Stražnji")
  bodyStyles      String[]  @default([]) // Kompatibilni stilovi karoserije
  yearFrom        Int?      // Godina od koje je kompatibilan
  yearTo          Int?      // Godina do koje je kompatibilan
  isUniversal     Boolean   @default(false) // Oznaka za univerzalne dijelove
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([productId, generationId, engineId])
}

// Model za kontakt zahtjeve
model ContactRequest {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  subject   String
  message   String
  status    String   @default("new") // new, read, responded
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Model za B2B aplikacije
model B2BRequest {
  id            String   @id @default(cuid())
  companyName   String
  contactPerson String
  email         String
  phone         String
  address       String
  city          String
  businessType  String
  description   String
  status        String   @default("new") // new, read, approved, rejected
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Model za featured products u carousel-u
model FeaturedProduct {
  id              String   @id @default(cuid())
  productId       String
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  displayOrder    Int      @default(0) // Redoslijed prikaza
  isActive        Boolean  @default(true)
  customTitle     String?  // Opcionalni custom naslov
  customImageUrl  String?  // Opcionalni custom image URL
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([productId])
}
